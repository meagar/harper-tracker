
.container
  form

    .form-group.clock

    - if @last_feed
      .form-group
        table.last-times

    .form-group
      a.form-control.btn.btn-primary.btn-block.btn-lg href="/feedings/new" Record Feeding

    / .form-group
      a.form-control.btn.btn-primary.btn-block.btn-lg href="/changings/new" Record Diaper Change

    / .form-group
      a.form-control.btn.btn-primary.btn-block.btn-lg href="/pumpings/new" Record Pumping

    / .form-group
      a.form-control.btn.btn-primary.btn-block.btn-lg href="/weights/new" Record Weight

javascript:

  function diff(t1, t2) {
    var diff = moment.duration(moment(t1).diff(t2));
    var h = diff.hours();
    var m = diff.minutes();

    if (h && m) {
      return h + 'h ' + m + 'm';
    } else if (h) {
      return h + 'h';
    } else {
      return m + 'm';
    }
  }

  var lastTimes = new Vue({
    el: 'table.last-times',
    template: `
      <table class="last-times table-bordered">
        <tr>
          <th>Last feed</th>
          <td>{{lastFeed}} ago</td>
        </tr>
        <tr>
          <th>Last pee</th>
          <td>{{lastPee}} ago</td>
        </tr>
        <tr>
          <th>Last poop</th>
          <td>{{lastPoop}} ago</td>
        </tr>
        <tr>
          <th>Last pump</th>
          <td>{{lastPump}}</td>
        </tr>
      </table>`,
    data() {
      return {
        lastFeedAt: '#{@last_feed&.start_time&.as_json}',
        lastPeeAt: '#{@last_pee&.change_time&.as_json}',
        lastPoopAt: '#{@last_poop&.change_time&.as_json}',
        lastPumpAt: '#{@last_pump&.pump_time&.as_json}',
      };
    },

    props: ['now'],

    mounted() {
      setInterval(() => { this.now = new Date(); }, 60 * 1000);
    },

    computed: {
      lastFeed() { return diff(this.now, this.lastFeedAt); },
      lastPee() { return diff(this.now, this.lastPeeAt); },
      lastPoop() { return diff(this.now, this.lastPoopAt); },
      lastPump() { return diff(this.now, this.lastPumpAt); },
    }
  });

  var clock = new Vue({
    el: '.clock',
    template: `
      <div class="form-group clock">
        <b>{{time}}</b>
        <hr/>
      </div>`,
    data() {
      return {
        time: this.computeTime(),
      }
    },
    mounted() {
      setInterval(() => { this.time = this.computeTime() }, 60 * 1000);
    },
    methods: {
      computeTime() {
        return moment().format('h:mm a, ddd MMM Do')
      }
    }
  })
